@startuml

class CommunicationException

class Communicator {
  -myHostName : String
  -receiver : Map<String, AbstractReceiver>
  -isServer : boolean
  -serverName : String
  +setHostName(String hostName)
  +setSenderManager(SenderManager sm)
  +setNodeRegistration(INodeRegistration nr)
  +setReceiver(Map<String, AbstractReceiver> cis)
  +setInterpreterManager(InterpreterManager im)
  +setIsServer(boolean isServer)
  +setClientRegistration(IClientRegistration cr)
  +setServerName(String serverName)
  +init()
  +dispose()
  -send(String hostName, DataContainer data, String interpreter)
  -initializeReceivers()
  -registerInterpreters()
  +send(String hostName, DataContainer data) : Future<DataContainer>
  +forward(String hostName, String message) : String
  -getHostAddress(String hostname)
  -getInterpreterForProtocol(String hostName, String protocol) : String
  -registerAsClient()  
}

class DataContainer {
  +dataId : String
  +data : Object
}

class MapDataContainer {
  +getData() : Map<String, Object>
}

interface ICommunicatorAccess {
  +{abstract}send(String hostname, DataContainer data) : Future<DataContainer>
  ~{abstract}forward(String hostname, String message) : String
}

interface IDataAcceptance {
  +{abstract}evaluateData(String hostAddress, DataContainer data) : Future<DataContainer>
}

interface ISender {
  +{abstract}send(String address, MessageContainer message) : MessageContainer
}

class MessageContainer {
  +interpreter : String
  +message : String
  +toString() : String
}

abstract class AbstractReceiver {
  +{abstract}getAddress() : String
  +setInterpreterManager(InterpreterManager interpreter)
  +dispose()
}

class SenderManager {
  -senderPool : ExecutorService
  -{static}THREAD_COUNT : int
  +setSender(Map<String, ISender> sender)
  +init()
  +dispose()
  ~send(String address, MessageContainer message, String protocol) : Future<MessageContainer>
}

interface IInterpreter {
  +{abstract}decode(String message) : DataContainer
  +{abstract}encode(DataContainer data) : String
  +{abstract}interpret(String message, String sender, IDataAcceptance acceptance, INodeRegistration nr) : String
}

class InterpreterManager {
  -interpreterPool : ExecutorService
  -{static}THREAD_COUNT : int
  +setInterpreter(Map<String, IInterpreter> cis)
  +setDataAcceptance(IDataAcceptance acceptance)
  +setNodeRegistration(INodeRegistration nr)
  +encode(DataContainer data, String type) : Future<String>
  +decode(String message, String type) : Future<DataContainer>
  +interpret(MessageContainer msgContainer, String sender) : Future<String>
  +getInterpreterIds() : Set<String>
}

class Encoder {
  +call() : String
}

class Decoder {
  +call() : DataContainer
}

class Interpreter {
  +call() : String
}

class Sender {
  +call() : MessageContainer
}

interface IClientRegistration {
  +formatRegistrationData(String name, Set<String> interpreters, Map<String, String> addressesProtocols) : DataContainer
  +formatUnregistrationData(String name) : DataContainer
  +getInterpreterID() : String
}

interface INodeRegistration {
  +registerNode(String name)
  +unregisterNode(String name)
  +addNodeSendAddressProtocol(String node, String address, String protocol)
  +getNodeSendAddresses(String node) : Set<String>
  +getNodeSendProtocol(String address) : String
  +deleteNodeSendAddressProtocol(String address)
  +addNodeInterpreter(String node, String interpreter)
  +getNodeInterpreters(String node) : Set<String>
  +getInterpretersForProtocol(String protocol) : Set<String>
  +deleteNodeInterpreter(String node, String interpreter)
}


DataContainer <|.. MapDataContainer
ICommunicatorAccess <|.. Communicator


AbstractReceiver o-- "interpreter" InterpreterManager

Communicator o-- "im" InterpreterManager
Communicator o-- "cr" IClientRegistration
Communicator o-- "nr" INodeRegistration
Communicator *-- "sm" SenderManager

InterpreterManager ..> Encoder : <<use>>
InterpreterManager ..> Decoder : <<use>>
InterpreterManager ..> Interpreter : <<use>>
InterpreterManager o-- "nr" INodeRegistration
InterpreterManager *-- "0..*\ninterpreter" IInterpreter
InterpreterManager o-- "dataAcceptance" IDataAcceptance

IInterpreter ..> IDataAcceptance : <<use>>
IInterpreter ..> INodeRegistration : <<use>>

Encoder ..> IInterpreter : <<use>>
Decoder ..> IInterpreter : <<use>>
Interpreter ..> IInterpreter : <<use>>

SenderManager *-- "0..*\nsender" ISender
SenderManager ..> Sender : <<use>>

Sender ..> ISender : <<use>>

@enduml